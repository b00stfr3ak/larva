// Code generated by protoc-gen-go.
// source: larva.proto
// DO NOT EDIT!

/*
Package larva is a generated protocol buffer package.

It is generated from these files:
	larva.proto

It has these top-level messages:
	Empty
	Request
	Reply
	Info
	ID
*/
package larva

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Request struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Command  string `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
	Argument string `protobuf:"bytes,3,opt,name=argument" json:"argument,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Reply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Info struct {
	Id     int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Status string `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *Info) Reset()                    { *m = Info{} }
func (m *Info) String() string            { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()               {}
func (*Info) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ID struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ID) Reset()                    { *m = ID{} }
func (m *ID) String() string            { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()               {}
func (*ID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*Empty)(nil), "larva.Empty")
	proto.RegisterType((*Request)(nil), "larva.Request")
	proto.RegisterType((*Reply)(nil), "larva.Reply")
	proto.RegisterType((*Info)(nil), "larva.Info")
	proto.RegisterType((*ID)(nil), "larva.ID")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Execute service

type ExecuteClient interface {
	CMD(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	StreamCMD(ctx context.Context, in *Request, opts ...grpc.CallOption) (Execute_StreamCMDClient, error)
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Execute_ListClient, error)
	Status(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Info, error)
}

type executeClient struct {
	cc *grpc.ClientConn
}

func NewExecuteClient(cc *grpc.ClientConn) ExecuteClient {
	return &executeClient{cc}
}

func (c *executeClient) CMD(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/larva.Execute/CMD", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executeClient) StreamCMD(ctx context.Context, in *Request, opts ...grpc.CallOption) (Execute_StreamCMDClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Execute_serviceDesc.Streams[0], c.cc, "/larva.Execute/StreamCMD", opts...)
	if err != nil {
		return nil, err
	}
	x := &executeStreamCMDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Execute_StreamCMDClient interface {
	Recv() (*Reply, error)
	grpc.ClientStream
}

type executeStreamCMDClient struct {
	grpc.ClientStream
}

func (x *executeStreamCMDClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *executeClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Execute_ListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Execute_serviceDesc.Streams[1], c.cc, "/larva.Execute/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &executeListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Execute_ListClient interface {
	Recv() (*Info, error)
	grpc.ClientStream
}

type executeListClient struct {
	grpc.ClientStream
}

func (x *executeListClient) Recv() (*Info, error) {
	m := new(Info)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *executeClient) Status(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := grpc.Invoke(ctx, "/larva.Execute/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Execute service

type ExecuteServer interface {
	CMD(context.Context, *Request) (*Reply, error)
	StreamCMD(*Request, Execute_StreamCMDServer) error
	List(*Empty, Execute_ListServer) error
	Status(context.Context, *ID) (*Info, error)
}

func RegisterExecuteServer(s *grpc.Server, srv ExecuteServer) {
	s.RegisterService(&_Execute_serviceDesc, srv)
}

func _Execute_CMD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecuteServer).CMD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/larva.Execute/CMD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecuteServer).CMD(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Execute_StreamCMD_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecuteServer).StreamCMD(m, &executeStreamCMDServer{stream})
}

type Execute_StreamCMDServer interface {
	Send(*Reply) error
	grpc.ServerStream
}

type executeStreamCMDServer struct {
	grpc.ServerStream
}

func (x *executeStreamCMDServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func _Execute_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecuteServer).List(m, &executeListServer{stream})
}

type Execute_ListServer interface {
	Send(*Info) error
	grpc.ServerStream
}

type executeListServer struct {
	grpc.ServerStream
}

func (x *executeListServer) Send(m *Info) error {
	return x.ServerStream.SendMsg(m)
}

func _Execute_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecuteServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/larva.Execute/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecuteServer).Status(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Execute_serviceDesc = grpc.ServiceDesc{
	ServiceName: "larva.Execute",
	HandlerType: (*ExecuteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CMD",
			Handler:    _Execute_CMD_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Execute_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCMD",
			Handler:       _Execute_StreamCMD_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "List",
			Handler:       _Execute_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("larva.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x91, 0xdf, 0x4a, 0xc3, 0x30,
	0x14, 0xc6, 0x4d, 0xd7, 0x3f, 0xf6, 0x4c, 0xbd, 0x08, 0x22, 0xa5, 0x20, 0x68, 0x40, 0xf0, 0xc6,
	0x22, 0xfa, 0x06, 0x75, 0xbb, 0x18, 0x4c, 0x18, 0xed, 0x13, 0xc4, 0x2e, 0x96, 0xc2, 0xd2, 0xd4,
	0x24, 0x15, 0xf7, 0x4a, 0x3e, 0xa5, 0x69, 0xd6, 0x14, 0xd9, 0xd5, 0xae, 0x9a, 0x5f, 0xbe, 0xaf,
	0x27, 0xdf, 0x39, 0x07, 0xe6, 0x3b, 0x2a, 0xbf, 0x69, 0xd6, 0x49, 0xa1, 0x05, 0x0e, 0x2c, 0x90,
	0x08, 0x82, 0x25, 0xef, 0xf4, 0x9e, 0x94, 0x10, 0x15, 0xec, 0xab, 0x67, 0x4a, 0x63, 0x0c, 0x7e,
	0x4b, 0x39, 0x4b, 0xd0, 0x1d, 0x7a, 0x8c, 0x0b, 0x7b, 0xc6, 0x09, 0x44, 0x95, 0xe0, 0x9c, 0xb6,
	0xdb, 0xc4, 0xb3, 0xd7, 0x0e, 0x71, 0x0a, 0xe7, 0x54, 0xd6, 0x3d, 0x67, 0xad, 0x4e, 0x66, 0x56,
	0x9a, 0x98, 0xdc, 0x43, 0x50, 0xb0, 0x6e, 0xb7, 0x1f, 0x7e, 0xe7, 0x4c, 0x29, 0x5a, 0xbb, 0xaa,
	0x0e, 0x49, 0x0e, 0xfe, 0xaa, 0xfd, 0x14, 0xf8, 0x0a, 0xbc, 0x66, 0x6b, 0xc5, 0xa0, 0x30, 0xa7,
	0x29, 0x84, 0xf7, 0x2f, 0xc4, 0x0d, 0x84, 0x4a, 0x53, 0xdd, 0xab, 0xf1, 0xa1, 0x91, 0xc8, 0x35,
	0x78, 0xab, 0xc5, 0x71, 0x85, 0x97, 0x5f, 0x04, 0xd1, 0xf2, 0x87, 0x55, 0xbd, 0x66, 0xf8, 0x01,
	0x66, 0x6f, 0xef, 0xc6, 0x92, 0x1d, 0x46, 0x30, 0x76, 0x9a, 0x5e, 0x4c, 0x6c, 0x42, 0x92, 0x33,
	0xfc, 0x04, 0x71, 0xa9, 0x25, 0xa3, 0xfc, 0x04, 0xf3, 0x33, 0x32, 0x55, 0xfd, 0x75, 0x63, 0x06,
	0xe6, 0x14, 0x3b, 0xc9, 0x74, 0x3e, 0xd2, 0xd0, 0x96, 0xb5, 0x11, 0x08, 0x4b, 0x1b, 0x14, 0xc7,
	0x4e, 0x5a, 0x1c, 0xb9, 0xf2, 0x5b, 0xb8, 0x6c, 0x44, 0x56, 0xcb, 0xae, 0x3a, 0xdc, 0xe7, 0xb0,
	0x1e, 0x3e, 0x9b, 0x61, 0x57, 0x1b, 0xf4, 0x11, 0xda, 0xa5, 0xbd, 0xfe, 0x05, 0x00, 0x00, 0xff,
	0xff, 0xe6, 0xfb, 0xcd, 0x91, 0xc3, 0x01, 0x00, 0x00,
}
